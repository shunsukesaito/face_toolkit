#version 400
//TessEvaluation

//The built-in gl_TessCoord variable lets us know where we are within the patch. 
//In this case, the primitive mode is triangles, so gl_TessCoord is a barycentric coordinate. 
//If we were performing quad subdivision, then it would be a UV coordinate and weï¿½d ignore the Z component.
layout(triangles, fractional_odd_spacing, ccw) in;

// in / out

uniform mat4 u_mvp;

uniform sampler2D u_sample_pos;

in vec2 tcTexcoord[];
in vec4 tcNormal[];

out vec4 tePosition;
out vec4 teWorldPos;
out vec4 teNormal;

float interpAttrib(float a1, float a2, float a3, float u, float v, float w)
{
	return u * a1 + v * a2 + w * a3;
}

vec2 interpAttrib(vec2 a1, vec2 a2, vec2 a3, float u, float v, float w)
{
	return u * a1 + v * a2 + w * a3;
}

vec3 interpAttrib(vec3 a1, vec3 a2, vec3 a3, float u, float v, float w)
{
	return u * a1 + v * a2 + w * a3;
}

vec4 interpAttrib(vec4 a1, vec4 a2, vec4 a3, float u, float v, float w)
{
	return u * a1 + v * a2 + w * a3;
}

void main(void)
{
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	float w = gl_TessCoord.z;

	vec2 uv1 = tcTexcoord[0];
	vec2 uv2 = tcTexcoord[1];
	vec2 uv3 = tcTexcoord[2];

	vec4 nml1 = tcNormal[0];
	vec4 nml2 = tcNormal[1];
	vec4 nml3 = tcNormal[2];

	vec2 uv = interpAttrib(uv1,uv2,uv3,u,v,w);

	// compute interpolated pos
	teWorldPos = texture(u_sample_pos, uv);

	tePosition = u_mvp * teWorldPos;
	
	teNormal = interpAttrib(nml1,nml2,nml3,u,v,w);

    gl_Position = tePosition;
}
